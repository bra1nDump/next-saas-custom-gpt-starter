// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// TODO: Steal these by pulling the datamodel using prisma from the database vercel subscription starter kit instead

//////////////////// Authentication ////////////////////
// Necessary for Next auth
// Copy pasted from https://authjs.dev/reference/adapter/prisma
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Customer      Customer[]
    Subscription  Subscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//////////////////// Subscriptions synchronized with Stripe ////////////////////
// TRANSLATED FROM https://github.com/vercel/nextjs-subscription-payments/blob/main/supabase/migrations/20230530034630_init.sql
model Customer {
    id               String @id @default(cuid())
    stripeCustomerId String @unique
    user             User   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Product {
    id          String  @id
    active      Boolean
    name        String
    description String?
    image       String?
    metadata    Json
    Price       Price[]
}

model Price {
    id              String              @id
    productId       String
    active          Boolean
    description     String?
    unitAmount      Int
    currency        String
    type            PricingType
    interval        PricingPlanInterval
    intervalCount   Int
    trialPeriodDays Int?
    metadata        Json
    product         Product             @relation(fields: [productId], references: [id])
    Subscription    Subscription[]
}

enum PricingType {
    oneTime
    recurring
}

enum PricingPlanInterval {
    day
    week
    month
    year
}

model Subscription {
    id                 String             @id
    userId             String
    status             SubscriptionStatus
    metadata           Json
    priceId            String
    quantity           Int
    cancelAtPeriodEnd  Boolean
    created            DateTime           @default(now())
    currentPeriodStart DateTime           @default(now())
    currentPeriodEnd   DateTime           @default(now())
    endedAt            DateTime?
    cancelAt           DateTime?
    canceledAt         DateTime?
    trialStart         DateTime?
    trialEnd           DateTime?
    user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    price              Price              @relation(fields: [priceId], references: [id])
}

enum SubscriptionStatus {
    trialing
    active
    canceled
    incomplete
    incompleteExpired
    pastDue
    unpaid
    paused
}
